// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserDraftCard should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserDraftCard
    EPL={
        Array [
            Object {},
            Object {},
            Object {},
          ]
    }
    handleTeam={[Function]}
    user={
        Object {
            "user_id": 2,
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="user-title-container"
>
          <h3
                    className="user-draft-title"
          >
                    2
          </h3>
</div>,
        <Droppable
          enabled={true}
          onDrop={[Function]}
          types={
                    Array [
                              "team",
                            ]
          }
>
          <div
                    className="draft-board"
                    id="target"
                    onDragOver={[Function]}
          >
                    <DraftPicks
                              teams={Array []}
                    />
          </div>
</Droppable>,
      ],
      "className": "user-card",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <h3
            className="user-draft-title"
>
            2
</h3>,
          "className": "user-title-container",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 2,
            "className": "user-draft-title",
          },
          "ref": null,
          "rendered": 2,
          "type": "h3",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="draft-board"
            id="target"
            onDragOver={[Function]}
>
            <DraftPicks
                        teams={Array []}
            />
</div>,
          "enabled": true,
          "onDrop": [Function],
          "types": Array [
            "team",
          ],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <DraftPicks
              teams={Array []}
/>,
            "className": "draft-board",
            "id": "target",
            "onDragOver": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "teams": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="user-title-container"
>
            <h3
                        className="user-draft-title"
            >
                        2
            </h3>
</div>,
          <Droppable
            enabled={true}
            onDrop={[Function]}
            types={
                        Array [
                                    "team",
                                  ]
            }
>
            <div
                        className="draft-board"
                        id="target"
                        onDragOver={[Function]}
            >
                        <DraftPicks
                                    teams={Array []}
                        />
            </div>
</Droppable>,
        ],
        "className": "user-card",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <h3
              className="user-draft-title"
>
              2
</h3>,
            "className": "user-title-container",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": 2,
              "className": "user-draft-title",
            },
            "ref": null,
            "rendered": 2,
            "type": "h3",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="draft-board"
              id="target"
              onDragOver={[Function]}
>
              <DraftPicks
                            teams={Array []}
              />
</div>,
            "enabled": true,
            "onDrop": [Function],
            "types": Array [
              "team",
            ],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <DraftPicks
                teams={Array []}
/>,
              "className": "draft-board",
              "id": "target",
              "onDragOver": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "teams": Array [],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
